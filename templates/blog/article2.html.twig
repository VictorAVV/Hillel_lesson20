{% extends 'base.html.twig' %}

{% block title %}Создаем MVC-блог на Symfony / {{title}}{% endblock %}

{% block body %}
<div class="jumbotron text-center">
	<h3>{{title}}</h3>
</div>

<div class="container">
	<p>Объе́ктно-ориенти́рованное программи́рование (ООП) — методология программирования, основанная на представлении
		программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы
		образуют иерархию наследования.<br />
		<br />
		Идеологически ООП — подход к программированию как к моделированию информационных объектов, решающий на новом
		уровне основную задачу структурного программирования: структурирование информации с точки зрения управляемости,
		что существенно улучшает управляемость самим процессом моделирования, что, в свою очередь, особенно важно при
		реализации крупных проектов.<br />
		<br />
		Основные понятия<br />
		<br />
		Абстракция данных<br />
		Абстрагирование означает выделение значимой информации и исключение из рассмотрения незначимой. В ООП
		рассматривают лишь абстракцию данных (нередко называя её просто «абстракцией»), подразумевая набор наиболее
		значимых характеристик объекта, доступных остальной программе.<br />
		<br />
		Инкапсуляция<br />
		Инкапсуляция — свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе. Одни языки
		(например, С++, Java или Ruby) отождествляют инкапсуляцию с сокрытием, но другие (Smalltalk, Eiffel, OCaml)
		различают эти понятия.<br />
		<br />
		Наследование <br />
		Наследование — свойство системы, позволяющее описать новый класс на основе уже существующего с частично или
		полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым,
		родительским или суперклассом. Новый класс — потомком, наследником, дочерним или производным классом.<br />
		<br />
		Полиморфизм подтипов <br />
		Полиморфизм подтипов (в ООП называемый просто «полиморфизмом») — свойство системы, позволяющее использовать
		объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта. Другой вид полиморфизма —
		параметрический — в ООП называют обобщённым программированием.<br />
		<br />
		Класс <br />
		Класс — универсальный, комплексный тип данных, состоящий из тематически единого набора «полей» (переменных более
		элементарных типов) и «методов» (функций для работы с этими полями), то есть он является моделью информационной
		сущности с внутренним и внешним интерфейсами для оперирования своим содержимым (значениями полей). В частности,
		в классах широко используются специальные блоки из одного или чаще двух спаренных методов, отвечающих за
		элементарные операции с определённым полем (интерфейс присваивания и считывания значения), которые имитируют
		непосредственный доступ к полю. Эти блоки называются «свойствами» и почти совпадают по конкретному имени со
		своим полем (например, имя поля может начинаться со строчной, а имя свойства — с заглавной буквы). Другим
		проявлением интерфейсной природы класса является то, что при копировании соответствующей переменной через
		присваивание копируется только интерфейс, но не сами данные, то есть класс — ссылочный тип данных.
		Переменная-объект, относящаяся к заданному классом типу, называется экземпляром этого класса. При этом в
		некоторых исполняющих системах класс также может представляться некоторым объектом при выполнении программы
		посредством динамической идентификации типа данных. Обычно классы разрабатывают таким образом, чтобы обеспечить
		отвечающие природе объекта и решаемой задаче целостность данных объекта, а также удобный и простой интерфейс. В
		свою очередь, целостность предметной области объектов и их интерфейсов, а также удобство их проектирования,
		обеспечивается наследованием.<br />
		<br />
		Объект <br />
		Сущность в адресном пространстве вычислительной системы, появляющаяся при создании экземпляра класса (например,
		после запуска результатов компиляции и связывания исходного кода на выполнение).</p>
</div>

{% endblock %}